import { createBrowserClient } from '@supabase/ssr';
import type { Session, SupabaseClient } from '@supabase/supabase-js';

// Cliente Supabase singleton para garantir consist√™ncia
let supabaseClient: SupabaseClient | null = null;

/**
 * Cria ou retorna o cliente Supabase com sess√£o ativa
 * Garante que a autentica√ß√£o seja mantida em todas as requisi√ß√µes
 */
export const getSupabaseClient = () => {
  if (!supabaseClient) {
    supabaseClient = createBrowserClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
    );
  }
  return supabaseClient;
};

/**
 * Verifica se o usu√°rio est√° autenticado e retorna a sess√£o
 * √ötil para validar autentica√ß√£o antes de fazer requisi√ß√µes
 */
export const getAuthenticatedSession = async () => {
  const supabase = getSupabaseClient();
  const { data: { session }, error } = await supabase.auth.getSession();
  
  if (error) {
    console.error('Erro ao obter sess√£o:', error);
    return null;
  }
  
  return session;
};

/**
 * Executa uma opera√ß√£o no Supabase garantindo que o usu√°rio est√° autenticado
 * Retorna null se n√£o houver sess√£o ativa
 */
export const withAuth = async <T>(operation: (supabase: SupabaseClient, session: Session) => Promise<T>): Promise<T | null> => {
  console.log('üîê withAuth: Verificando autentica√ß√£o...');
  const session = await getAuthenticatedSession();
  
  if (!session) {
    console.error('üîê withAuth: Usu√°rio n√£o autenticado - sess√£o n√£o encontrada');
    return null;
  }
  
  console.log('üîê withAuth: Sess√£o encontrada, usu√°rio:', session.user?.email);
  const supabase = getSupabaseClient();
  
  // Garantir que o token de acesso est√° definido no cliente
  if (session.access_token) {
    console.log('üîê withAuth: Definindo sess√£o no cliente Supabase');
    supabase.auth.setSession({
      access_token: session.access_token,
      refresh_token: session.refresh_token
    });
  }
  
  try {
    const result = await operation(supabase, session);
    console.log('üîê withAuth: Opera√ß√£o executada com sucesso');
    return result;
  } catch (error) {
    console.error('üîê withAuth: Erro na opera√ß√£o:', error);
    throw error;
  }
};

/**
 * For√ßa a atualiza√ß√£o da sess√£o no cliente Supabase
 */
export const refreshSupabaseSession = async () => {
  const supabase = getSupabaseClient();
  const { data, error } = await supabase.auth.refreshSession();
  
  if (error) {
    console.error('Erro ao atualizar sess√£o:', error);
    return null;
  }
  
  return data.session;
};